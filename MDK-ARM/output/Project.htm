<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Nov 07 21:05:34 2020
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; draw_test &rArr; gui_box2 &rArr; gui_draw_line &rArr; gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[16]">ADC_CMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ADC_CMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC_CMP_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[2f]">CAN0_RX0_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[30]">CAN0_RX1_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[31]">CAN0_SCE_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[2e]">CAN0_TX_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[36]">CAN1_RX0_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[37]">CAN1_RX1_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[38]">CAN1_SCE_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[35]">CAN1_TX_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[26]">CEC_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[13]">DMA_Channel0_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[14]">DMA_Channel1_2_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[15]">DMA_Channel3_4_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[33]">DMA_Channel5_6_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[f]">EXTI0_1_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[10]">EXTI2_3_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[11]">EXTI4_15_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[d]">FMC_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[27]">I2C0_ER_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[20]">I2C0_EV_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[28]">I2C1_ER_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[21]">I2C1_EV_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[2a]">I2C2_ER_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[29]">I2C2_EV_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[e]">RCU_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[c]">RTC_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[32]">SLCD_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[22]">SPI0_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[23]">SPI1_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[34]">SPI2_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[3a]">SystemInit</a> from system_gd32f1x0.o(i.SystemInit) referenced from startup_gd32f1x0.o(.text)
 <LI><a href="#[17]">TIMER0_BRK_UP_TRG_COM_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[18]">TIMER0_CC_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[1c]">TIMER13_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[1d]">TIMER14_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[1e]">TIMER15_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[1f]">TIMER16_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[19]">TIMER1_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[1a]">TIMER2_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[1b]">TIMER5_DAC_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[12]">TSI_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[24]">USART0_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[25]">USART1_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[2d]">USBDWakeUp_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[2c]">USBD_HP_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[2b]">USBD_LP_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32f1x0.o(.text) referenced from startup_gd32f1x0.o(RESET)
 <LI><a href="#[3b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f1x0.o(.text)
 <LI><a href="#[3c]">fputc</a> from main.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[39]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[76]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[77]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[78]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[79]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[7a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ADC_CMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN0_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA_Channel1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA_Channel5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER0_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER0_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USBDWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USBD_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USBD_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f1x0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[7b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>SystemInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, system_gd32f1x0.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f1x0.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>__0printf$bare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7c]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[6b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[7e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[7f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[43]"></a>color_test</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, tft_test.o(i.color_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = color_test &rArr; gui_draw_font_gbk16 &rArr; gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_font_gbk16
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>delay_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(i.delay_init))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>delay_ms</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_test
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_test
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_test
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_test
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_led
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reset
</UL>

<P><STRONG><a name="[47]"></a>draw_test</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tft_test.o(i.draw_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = draw_test &rArr; gui_box2 &rArr; gui_draw_line &rArr; gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_rect
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_font_gbk16
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_circle
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_box2
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_box
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>flash_led</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(i.flash_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_led
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_ledon
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_ledoff
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>font_test</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, tft_test.o(i.font_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = font_test &rArr; gui_draw_font_gbk24 &rArr; gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_font_gbk24
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_font_gbk16
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[53]"></a>gd_eval_COMinit</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, gd32f1x0_eval.o(i.gd_eval_COMinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gd_eval_COMinit &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transfer_config
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>gd_eval_ledinit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gd32f1x0_eval.o(i.gd_eval_ledinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gd_eval_ledinit &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_status_led_init
</UL>

<P><STRONG><a name="[4e]"></a>gd_eval_ledoff</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f1x0_eval.o(i.gd_eval_ledoff))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_status_led_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_led
</UL>

<P><STRONG><a name="[4d]"></a>gd_eval_ledon</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f1x0_eval.o(i.gd_eval_ledon))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_led
</UL>

<P><STRONG><a name="[55]"></a>gpio_af_set</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, gd32f1x0_gpio.o(i.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_COMinit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_init
</UL>

<P><STRONG><a name="[56]"></a>gpio_mode_set</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, gd32f1x0_gpio.o(i.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_ledinit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_COMinit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_init
</UL>

<P><STRONG><a name="[57]"></a>gpio_output_options_set</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, gd32f1x0_gpio.o(i.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_ledinit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_COMinit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_init
</UL>

<P><STRONG><a name="[48]"></a>gui_box</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, gui_1.o(i.gui_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gui_box &rArr; gui_draw_line &rArr; gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_test
</UL>

<P><STRONG><a name="[49]"></a>gui_box2</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, gui_1.o(i.gui_box2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gui_box2 &rArr; gui_draw_line &rArr; gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_line
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_test
</UL>

<P><STRONG><a name="[4b]"></a>gui_circle</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, gui_1.o(i.gui_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gui_circle &rArr; gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_test
</UL>

<P><STRONG><a name="[45]"></a>gui_draw_font_gbk16</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, gui_1.o(i.gui_draw_font_gbk16))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gui_draw_font_gbk16 &rArr; gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_test
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_test
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_test
</UL>

<P><STRONG><a name="[50]"></a>gui_draw_font_gbk24</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, gui_1.o(i.gui_draw_font_gbk24))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gui_draw_font_gbk24 &rArr; gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_test
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_test
</UL>

<P><STRONG><a name="[5e]"></a>gui_draw_font_num32</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, gui_1.o(i.gui_draw_font_num32))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gui_draw_font_num32 &rArr; gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_test
</UL>

<P><STRONG><a name="[5c]"></a>gui_draw_line</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, gui_1.o(i.gui_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gui_draw_line &rArr; gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_xy
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_box2
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_box
</UL>

<P><STRONG><a name="[5d]"></a>gui_draw_point</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_driver.o(i.gui_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_xy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_rect
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_line
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_font_num32
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_font_gbk24
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_font_gbk16
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_circle
</UL>

<P><STRONG><a name="[4a]"></a>gui_rect</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, gui_1.o(i.gui_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gui_rect &rArr; gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_test
</UL>

<P><STRONG><a name="[44]"></a>lcd_clear</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lcd_driver.o(i.lcd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcd_clear &rArr; lcd_set_region &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_region
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_test
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_test
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_test
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_test
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>lcd_init</STRONG> (Thumb, 530 bytes, Stack size 8 bytes, lcd_driver.o(i.lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_init &rArr; spi0_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>lcd_set_region</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lcd_driver.o(i.lcd_set_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_set_region &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[5f]"></a>lcd_set_xy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcd_driver.o(i.lcd_set_xy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data_16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_point
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_line
</UL>

<P><STRONG><a name="[39]"></a>main</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; draw_test &rArr; gui_box2 &rArr; gui_draw_line &rArr; gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_test
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_COMinit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;font_test
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_test
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_test
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_status_led_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_led
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6c]"></a>num_test</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tft_test.o(i.num_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = num_test &rArr; gui_draw_font_num32 &rArr; gui_draw_point &rArr; lcd_set_xy &rArr; lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_font_num32
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_font_gbk24
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>rcu_clock_freq_get</STRONG> (Thumb, 646 bytes, Stack size 96 bytes, gd32f1x0_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[54]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f1x0_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_ledinit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_COMinit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_init
</UL>

<P><STRONG><a name="[74]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f1x0_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[73]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f1x0_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[6e]"></a>spi_crc_polynomial_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f1x0_spi.o(i.spi_crc_polynomial_set))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_init
</UL>

<P><STRONG><a name="[6f]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f1x0_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_init
</UL>

<P><STRONG><a name="[6d]"></a>spi_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32f1x0_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi0_init
</UL>

<P><STRONG><a name="[68]"></a>systick_config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, systick.o(i.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systick_config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>test_status_led_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.test_status_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = test_status_led_init &rArr; gd_eval_ledinit &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_ledoff
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_ledinit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>usart_baudrate_set</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, gd32f1x0_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_COMinit
</UL>

<P><STRONG><a name="[51]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f1x0_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[58]"></a>usart_deinit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gd32f1x0_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_COMinit
</UL>

<P><STRONG><a name="[52]"></a>usart_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f1x0_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5a]"></a>usart_transfer_config</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, gd32f1x0_usart.o(i.usart_transfer_config))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_eval_COMinit
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[71]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[70]"></a>system_clock_72m_hxtal</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, system_gd32f1x0.o(i.system_clock_72m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[40]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f1x0.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_72m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[65]"></a>lcd_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lcd_driver.o(i.lcd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[60]"></a>lcd_write_data</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_driver.o(i.lcd_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data_16bit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_draw_point
</UL>

<P><STRONG><a name="[67]"></a>lcd_write_data_16bit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lcd_driver.o(i.lcd_write_data_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_write_data_16bit &rArr; lcd_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_region
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_xy
</UL>

<P><STRONG><a name="[66]"></a>lcd_write_index</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_driver.o(i.lcd_write_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_write_index
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_region
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_xy
</UL>

<P><STRONG><a name="[64]"></a>spi0_init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, lcd_driver.o(i.spi0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spi0_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_crc_polynomial_set
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[62]"></a>spi_write_byte</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lcd_driver.o(i.spi_write_byte))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_index
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_data
</UL>

<P><STRONG><a name="[42]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
